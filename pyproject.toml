[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "Humre"
authors = [
    {name = "Al Sweigart", email = "al@inventwithpython.com"},
]
description = """A human-readable regular expression module for Python. Humre handles regex syntax for you and creates regex strings to pass to Python's re.compile(). Pronounced "hum, ree"."""
readme = "README.md"
keywords = ["regex", "re", "regular expression"]
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/asweigart/humre"
"Bug Tracker" = "https://github.com/asweigart/humre/issues"

[tool.setuptools.dynamic]
version = {attr = "humre.__version__"}

[tool.ruff]
line-length = 120

[tool.ruff.lint]
preview = true
select = ['ALL']
ignore = [
  'ANN101', # Missing type annotation for self.
  'ANN102', # Missing type annotation for cls.
  'ANN401', # Dynamically typed expressions (Any).
  'ARG001', # Unused function argument.
  'ARG002', # Unused method argument.
  'ARG003', # Unused class method argument.
  'ARG004', # Unused static method argument.
  'B011', # Do not assert false.
  'C901', # Complex structure.
  'COM812', # Trailing comma missing.
  'CPY001', # Missing copyright.
  'D100', # Missing docstring in public module.
  'D101', # Missing docstring in public class.
  'D102', # Missing docstring in public method.
  'D103', # Missing docstring in public function.
  'D105', # Missing docstring in magic method.
  'D107', # Missing docstring in __init__.
  'ERA001', # Commented-out code.
  'FBT003', # Boolean positional value in function call.
  'FIX002', # Line contains TODO, consider resolving the issue.
  'G004', # Logging statement uses f-string.
  'I001', # Import block is un-sorted or un-formatted.
  'PD008', # Use .loc instead of .at. If speed is important, use NumPy.
  'PGH003', # Use specific rule codes when ignoring type issues.
  'PLR0913', # Too many arguments in function definition.
  'PLR6301', # Method doesn't use self.
  'PT013', # Found incorrect import of pytest, use simple import pytest instead.
  'Q000', # Single quotes found but double quotes preferred.
  'RUF021', # Parenthesize `a and b` expressions when chaining `and` and `or` together...
  'S101', # Assert used.
  'TCH001', # Move application import into a type-checking block.
  'TCH002', # Move third-party import into a type-checking block.
  'TCH003', # Move standard library import into a type-checking block.
  'TD002', # Missing author in TODO; try: # TODO(<author_name>): ....
  'TD003', # Missing issue link on the line following this TODO.
  'TID252', # Relative imports from parent modules are banned.
]
